generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/client"
  previewFeatures = ["driverAdapters", "views"]
  binaryTargets   = ["native", "linux-musl", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MetaReport {
  id String @unique
}

model Spell {
  name         String      @unique
  aboutContent SpellAbout?
  buildContent SpellBuild?
}

model SpellAbout {
  spellName    String   @unique
  introduction String
  mageInfo     String
  augments     String[]
  upgrades     String[]
  overview     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  parentSpell  Spell    @relation(fields: [spellName], references: [name], onDelete: Cascade)

  @@map("spell_about")
}

model SpellBuild {
  spellName             String   @unique
  augmentNameDps        String[]
  augmentDescriptionDps String[]
  augmentNameSub        String[]
  augmentDescriptionSub String[]
  augmentNameSup        String[]
  augmentDescriptionSup String[]
  upgradesDps           String[]
  upgradesSub           String[]
  upgradesSup           String[]
  elementsDps           String[]
  elementsSub           String[]
  elementsSup           String[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  parentSpell           Spell    @relation(fields: [spellName], references: [name], onDelete: Cascade)

  @@map("spell_build")
}

model Tierlist {
  id         String   @id @default(cuid())
  name       String?
  descripton String?
  likes      Int      @default(0)
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tiers      Tier[]
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("tier_list")
}

model Tier {
  id          String   @id @default(cuid())
  tierId      String
  name        String
  listId      String
  spells      String[]
  parent_list Tierlist @relation(fields: [listId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id       String       @id @default(cuid())
  title    String
  authorId String
  content  BlogContent?
  author   User         @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("blog_post")
}

model BlogContent {
  id      String   @id @default(cuid())
  content String
  blogId  String   @unique
  parent  BlogPost @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@map("blog_content")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model User {
  id            String     @id
  name          String
  email         String     @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  accounts      Account[]
  blogs         BlogPost[]
  sessions      Session[]
  tierLists     Tierlist[]

  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

view SpellsView {
  name String @unique

  @@map("spells_view")
}

enum Role {
  USER
  ADMIN
  CURATOR
}
