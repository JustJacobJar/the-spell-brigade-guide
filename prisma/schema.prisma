
generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/client"
  // it is better to include the generator inside `src/` or `app/` if `src/` not available.
  binaryTargets   = ["native", "linux-musl", "rhel-openssl-3.0.x"]
  // first one is for cross-platform, second one for docker, last one for serverless environment. safe to include all
  previewFeatures = ["driverAdapters", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider  = "postgres"
//   url       = env("AUTH_POSTGRES_PRISMA_URL")
//   directUrl = env("AUTH_POSTGRES_URL_NON_POOLING")
// }

model Spell {
  name String @unique
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.

view SpellsView {
  name String @unique

  @@map("spells_view")
}

enum Role {
  USER
  CURATOR
  ADMIN
}

model Tierlist {
  id         String  @id @default(cuid())
  name       String?
  descripton String?
  likes      Int     @default(0)
  tiers      Tier[]

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tier_list")
}

model Tier {
  id          String   @id @default(cuid()) //unique id for db 
  tierId      String //The id used to order them and unique to droppable
  name        String //Display name of tier list
  parent_list Tierlist @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String

  spells String[] //Must be from the Spells List in the db

}

model BlogPost {
  id    String @id @default(cuid())
  title String

  content BlogContent?

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@map("blog_post")
}

model BlogContent {
  id      String @id @default(cuid())
  content String

  parent BlogPost @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String   @unique

  @@map("blog_content")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]

  blogs BlogPost[]
  tierLists Tierlist[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}
