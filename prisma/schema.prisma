generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  binaryTargets = ["native", "linux-musl", "rhel-openssl-3.0.x"]  // first one is for cross-platform, second one for docker, last one for serverless environment. safe to include all
  previewFeatures = ["driverAdapters", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider  = "postgres"
//   url       = env("AUTH_POSTGRES_PRISMA_URL")
//   directUrl = env("AUTH_POSTGRES_URL_NON_POOLING")
// }


model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]

  tierLists Tierlist[]
  blog_posts BlogPost[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Spell {
  name String @unique
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view SpellsView {
  name String @unique
  @@map("spells_view")
}

enum Role {
  USER
  CURATOR
  ADMIN
}

model Tierlist {
  id String @id @default(cuid())
  name String?
  descripton String?
  likes Int @default(0)
  tiers Tier[]

  author User @relation(fields: [authorId],references: [id], onDelete: Cascade)
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tier_list")
}

model Tier{
  id String @id @default(cuid())  //unique id for db 
  tierId String //The id used to order them and unique to droppable
  name String //Display name of tier list
  
  parent_list Tierlist @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId String

  spells String[] //Must be from the Spells List in the db

}

model BlogPost{
  id String @id @default(cuid()) 
  title String

  content BlogContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String @unique

  author User @relation(fields: [authorId],references: [id], onDelete: Cascade)
  authorId String

  @@map("blog_post")
}

model BlogContent{
  id String @id @default(cuid()) 
  content String

  parent BlogPost?

  @@map("blog_content")
}